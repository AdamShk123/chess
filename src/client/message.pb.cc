// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message.proto
// Protobuf C++ Version: 5.29.2

#include "message.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Chess {

inline constexpr Message_Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : row_{0u},
        col_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Message_Position::Message_Position(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Message_PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PositionDefaultTypeInternal() {}
  union {
    Message_Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PositionDefaultTypeInternal _Message_Position_default_instance_;

inline constexpr Message_Move::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        to_{nullptr},
        from_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Message_Move::Message_Move(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Message_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MoveDefaultTypeInternal() {}
  union {
    Message_Move _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MoveDefaultTypeInternal _Message_Move_default_instance_;

inline constexpr Message::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        move_{nullptr},
        type_{static_cast< ::Chess::Message_Type >(0)},
        iswhite_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Message::Message(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace Chess
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_message_2eproto = nullptr;
const ::uint32_t
    TableStruct_message_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Position, _impl_.row_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Position, _impl_.col_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Move, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Move, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Move, _impl_.to_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message_Move, _impl_.from_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::Chess::Message, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Chess::Message, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message, _impl_.iswhite_),
        PROTOBUF_FIELD_OFFSET(::Chess::Message, _impl_.move_),
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Chess::Message_Position)},
        {10, 20, -1, sizeof(::Chess::Message_Move)},
        {22, 33, -1, sizeof(::Chess::Message)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::Chess::_Message_Position_default_instance_._instance,
    &::Chess::_Message_Move_default_instance_._instance,
    &::Chess::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_message_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rmessage.proto\022\005Chess\"\272\002\n\007Message\022!\n\004ty"
    "pe\030\001 \001(\0162\023.Chess.Message.Type\022\017\n\007isWhite"
    "\030\002 \001(\010\022!\n\004move\030\003 \001(\0132\023.Chess.Message.Mov"
    "e\032$\n\010Position\022\013\n\003row\030\001 \001(\r\022\013\n\003col\030\002 \001(\r\032"
    "R\n\004Move\022#\n\002to\030\001 \001(\0132\027.Chess.Message.Posi"
    "tion\022%\n\004from\030\002 \001(\0132\027.Chess.Message.Posit"
    "ion\"^\n\004Type\022\r\n\tJOIN_GAME\020\000\022\017\n\013CREATE_GAM"
    "E\020\001\022\r\n\tMAKE_MOVE\020\002\022\n\n\006RESIGN\020\003\022\007\n\003WIN\020\004\022"
    "\010\n\004LOSE\020\005\022\010\n\004DRAW\020\006b\006proto3"
};
static ::absl::once_flag descriptor_table_message_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false,
    false,
    347,
    descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_message_2eproto::offsets,
    file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
namespace Chess {
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Message_Type_internal_data_[] = {
    458752u, 0u, };
bool Message_Type_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Message_Type Message::JOIN_GAME;
constexpr Message_Type Message::CREATE_GAME;
constexpr Message_Type Message::MAKE_MOVE;
constexpr Message_Type Message::RESIGN;
constexpr Message_Type Message::WIN;
constexpr Message_Type Message::LOSE;
constexpr Message_Type Message::DRAW;
constexpr Message_Type Message::Type_MIN;
constexpr Message_Type Message::Type_MAX;
constexpr int Message::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Message_Position::_Internal {
 public:
};

Message_Position::Message_Position(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Chess.Message.Position)
}
Message_Position::Message_Position(
    ::google::protobuf::Arena* arena, const Message_Position& from)
    : Message_Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Message_Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Message_Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, row_),
           0,
           offsetof(Impl_, col_) -
               offsetof(Impl_, row_) +
               sizeof(Impl_::col_));
}
Message_Position::~Message_Position() {
  // @@protoc_insertion_point(destructor:Chess.Message.Position)
  SharedDtor(*this);
}
inline void Message_Position::SharedDtor(MessageLite& self) {
  Message_Position& this_ = static_cast<Message_Position&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Message_Position::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Message_Position(arena);
}
constexpr auto Message_Position::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Message_Position),
                                            alignof(Message_Position));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Message_Position::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Message_Position_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Message_Position::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Message_Position>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Message_Position::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Message_Position>(), &Message_Position::ByteSizeLong,
            &Message_Position::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Message_Position, _impl_._cached_size_),
        false,
    },
    &Message_Position::kDescriptorMethods,
    &descriptor_table_message_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Message_Position::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Message_Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Chess::Message_Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 col = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Message_Position, _impl_.col_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Message_Position, _impl_.col_)}},
    // uint32 row = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Message_Position, _impl_.row_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Message_Position, _impl_.row_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 row = 1;
    {PROTOBUF_FIELD_OFFSET(Message_Position, _impl_.row_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 col = 2;
    {PROTOBUF_FIELD_OFFSET(Message_Position, _impl_.col_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Message_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Chess.Message.Position)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.row_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.col_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.col_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Message_Position::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Message_Position& this_ = static_cast<const Message_Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Message_Position::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Message_Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Chess.Message.Position)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 row = 1;
          if (this_._internal_row() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_row(), target);
          }

          // uint32 col = 2;
          if (this_._internal_col() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_col(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Chess.Message.Position)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Message_Position::ByteSizeLong(const MessageLite& base) {
          const Message_Position& this_ = static_cast<const Message_Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Message_Position::ByteSizeLong() const {
          const Message_Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Chess.Message.Position)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 row = 1;
            if (this_._internal_row() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_row());
            }
            // uint32 col = 2;
            if (this_._internal_col() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_col());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Message_Position::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Message_Position*>(&to_msg);
  auto& from = static_cast<const Message_Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Chess.Message.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_row() != 0) {
    _this->_impl_.row_ = from._impl_.row_;
  }
  if (from._internal_col() != 0) {
    _this->_impl_.col_ = from._impl_.col_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Position::CopyFrom(const Message_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chess.Message.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Message_Position::InternalSwap(Message_Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_Position, _impl_.col_)
      + sizeof(Message_Position::_impl_.col_)
      - PROTOBUF_FIELD_OFFSET(Message_Position, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::google::protobuf::Metadata Message_Position::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Message_Move::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Message_Move>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Message_Move, _impl_._has_bits_);
};

Message_Move::Message_Move(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Chess.Message.Move)
}
inline PROTOBUF_NDEBUG_INLINE Message_Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Chess::Message_Move& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Message_Move::Message_Move(
    ::google::protobuf::Arena* arena,
    const Message_Move& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Message_Move* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.to_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Chess::Message_Position>(
                              arena, *from._impl_.to_)
                        : nullptr;
  _impl_.from_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Chess::Message_Position>(
                              arena, *from._impl_.from_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:Chess.Message.Move)
}
inline PROTOBUF_NDEBUG_INLINE Message_Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Message_Move::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, to_),
           0,
           offsetof(Impl_, from_) -
               offsetof(Impl_, to_) +
               sizeof(Impl_::from_));
}
Message_Move::~Message_Move() {
  // @@protoc_insertion_point(destructor:Chess.Message.Move)
  SharedDtor(*this);
}
inline void Message_Move::SharedDtor(MessageLite& self) {
  Message_Move& this_ = static_cast<Message_Move&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.to_;
  delete this_._impl_.from_;
  this_._impl_.~Impl_();
}

inline void* Message_Move::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Message_Move(arena);
}
constexpr auto Message_Move::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Message_Move),
                                            alignof(Message_Move));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Message_Move::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Message_Move_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Message_Move::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Message_Move>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Message_Move::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Message_Move>(), &Message_Move::ByteSizeLong,
            &Message_Move::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Message_Move, _impl_._cached_size_),
        false,
    },
    &Message_Move::kDescriptorMethods,
    &descriptor_table_message_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Message_Move::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Message_Move::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Message_Move, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Chess::Message_Move>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .Chess.Message.Position from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Message_Move, _impl_.from_)}},
    // .Chess.Message.Position to = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Message_Move, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Chess.Message.Position to = 1;
    {PROTOBUF_FIELD_OFFSET(Message_Move, _impl_.to_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Chess.Message.Position from = 2;
    {PROTOBUF_FIELD_OFFSET(Message_Move, _impl_.from_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Chess::Message_Position>()},
    {::_pbi::TcParser::GetTable<::Chess::Message_Position>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Message_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Chess.Message.Move)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Message_Move::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Message_Move& this_ = static_cast<const Message_Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Message_Move::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Message_Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Chess.Message.Move)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .Chess.Message.Position to = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          // .Chess.Message.Position from = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Chess.Message.Move)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Message_Move::ByteSizeLong(const MessageLite& base) {
          const Message_Move& this_ = static_cast<const Message_Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Message_Move::ByteSizeLong() const {
          const Message_Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Chess.Message.Move)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .Chess.Message.Position to = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
            // .Chess.Message.Position from = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Message_Move::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Message_Move*>(&to_msg);
  auto& from = static_cast<const Message_Move&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Chess.Message.Move)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::Chess::Message_Position>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::Chess::Message_Position>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Move::CopyFrom(const Message_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chess.Message.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Message_Move::InternalSwap(Message_Move* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_Move, _impl_.from_)
      + sizeof(Message_Move::_impl_.from_)
      - PROTOBUF_FIELD_OFFSET(Message_Move, _impl_.to_)>(
          reinterpret_cast<char*>(&_impl_.to_),
          reinterpret_cast<char*>(&other->_impl_.to_));
}

::google::protobuf::Metadata Message_Move::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Message::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Message>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Message, _impl_._has_bits_);
};

Message::Message(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Chess.Message)
}
inline PROTOBUF_NDEBUG_INLINE Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Chess::Message& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Message::Message(
    ::google::protobuf::Arena* arena,
    const Message& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Message* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.move_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Chess::Message_Move>(
                              arena, *from._impl_.move_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, iswhite_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::iswhite_));

  // @@protoc_insertion_point(copy_constructor:Chess.Message)
}
inline PROTOBUF_NDEBUG_INLINE Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, move_),
           0,
           offsetof(Impl_, iswhite_) -
               offsetof(Impl_, move_) +
               sizeof(Impl_::iswhite_));
}
Message::~Message() {
  // @@protoc_insertion_point(destructor:Chess.Message)
  SharedDtor(*this);
}
inline void Message::SharedDtor(MessageLite& self) {
  Message& this_ = static_cast<Message&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.move_;
  this_._impl_.~Impl_();
}

inline void* Message::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Message(arena);
}
constexpr auto Message::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Message),
                                            alignof(Message));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Message::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Message_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Message::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Message>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Message::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Message>(), &Message::ByteSizeLong,
            &Message::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Message, _impl_._cached_size_),
        false,
    },
    &Message::kDescriptorMethods,
    &descriptor_table_message_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Message::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Message::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Message, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Chess::Message>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Chess.Message.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Message, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Message, _impl_.type_)}},
    // bool isWhite = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Message, _impl_.iswhite_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Message, _impl_.iswhite_)}},
    // .Chess.Message.Move move = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Message, _impl_.move_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Chess.Message.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool isWhite = 2;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.iswhite_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .Chess.Message.Move move = 3;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.move_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Chess::Message_Move>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Chess.Message)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.move_ != nullptr);
    _impl_.move_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.iswhite_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.iswhite_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Message::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Message& this_ = static_cast<const Message&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Message::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Message& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Chess.Message)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .Chess.Message.Type type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // bool isWhite = 2;
          if (this_._internal_iswhite() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_iswhite(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .Chess.Message.Move move = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.move_, this_._impl_.move_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Chess.Message)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Message::ByteSizeLong(const MessageLite& base) {
          const Message& this_ = static_cast<const Message&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Message::ByteSizeLong() const {
          const Message& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Chess.Message)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .Chess.Message.Move move = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.move_);
            }
          }
           {
            // .Chess.Message.Type type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // bool isWhite = 2;
            if (this_._internal_iswhite() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Message::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Chess.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.move_ != nullptr);
    if (_this->_impl_.move_ == nullptr) {
      _this->_impl_.move_ =
          ::google::protobuf::Message::CopyConstruct<::Chess::Message_Move>(arena, *from._impl_.move_);
    } else {
      _this->_impl_.move_->MergeFrom(*from._impl_.move_);
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_iswhite() != 0) {
    _this->_impl_.iswhite_ = from._impl_.iswhite_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chess.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Message::InternalSwap(Message* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.iswhite_)
      + sizeof(Message::_impl_.iswhite_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.move_)>(
          reinterpret_cast<char*>(&_impl_.move_),
          reinterpret_cast<char*>(&other->_impl_.move_));
}

::google::protobuf::Metadata Message::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Chess
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_message_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
