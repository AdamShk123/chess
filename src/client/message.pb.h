// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message.proto
// Protobuf C++ Version: 5.29.2

#ifndef message_2eproto_2epb_2eh
#define message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace Chess {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_Move;
struct Message_MoveDefaultTypeInternal;
extern Message_MoveDefaultTypeInternal _Message_Move_default_instance_;
class Message_Position;
struct Message_PositionDefaultTypeInternal;
extern Message_PositionDefaultTypeInternal _Message_Position_default_instance_;
}  // namespace Chess
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Chess {
enum Message_Type : int {
  Message_Type_JOIN_GAME = 0,
  Message_Type_CREATE_GAME = 1,
  Message_Type_MAKE_MOVE = 2,
  Message_Type_RESIGN = 3,
  Message_Type_WIN = 4,
  Message_Type_LOSE = 5,
  Message_Type_DRAW = 6,
  Message_Type_Message_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Message_Type_Message_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Message_Type_IsValid(int value);
extern const uint32_t Message_Type_internal_data_[];
constexpr Message_Type Message_Type_Type_MIN = static_cast<Message_Type>(0);
constexpr Message_Type Message_Type_Type_MAX = static_cast<Message_Type>(6);
constexpr int Message_Type_Type_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Message_Type_descriptor();
template <typename T>
const std::string& Message_Type_Name(T value) {
  static_assert(std::is_same<T, Message_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Message_Type_Name(static_cast<Message_Type>(value));
}
template <>
inline const std::string& Message_Type_Name(Message_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Message_Type_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Message_Type_Parse(absl::string_view name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
      Message_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Message_Position final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Chess.Message.Position) */ {
 public:
  inline Message_Position() : Message_Position(nullptr) {}
  ~Message_Position() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message_Position* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message_Position));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message_Position(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message_Position(const Message_Position& from) : Message_Position(nullptr, from) {}
  inline Message_Position(Message_Position&& from) noexcept
      : Message_Position(nullptr, std::move(from)) {}
  inline Message_Position& operator=(const Message_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Position& operator=(Message_Position&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Position* internal_default_instance() {
    return reinterpret_cast<const Message_Position*>(
        &_Message_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Message_Position& a, Message_Position& b) { a.Swap(&b); }
  inline void Swap(Message_Position* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Position* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message_Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message_Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message_Position& from) { Message_Position::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message_Position* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Chess.Message.Position"; }

 protected:
  explicit Message_Position(::google::protobuf::Arena* arena);
  Message_Position(::google::protobuf::Arena* arena, const Message_Position& from);
  Message_Position(::google::protobuf::Arena* arena, Message_Position&& from) noexcept
      : Message_Position(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // uint32 row = 1;
  void clear_row() ;
  ::uint32_t row() const;
  void set_row(::uint32_t value);

  private:
  ::uint32_t _internal_row() const;
  void _internal_set_row(::uint32_t value);

  public:
  // uint32 col = 2;
  void clear_col() ;
  ::uint32_t col() const;
  void set_col(::uint32_t value);

  private:
  ::uint32_t _internal_col() const;
  void _internal_set_col(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Chess.Message.Position)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message_Position& from_msg);
    ::uint32_t row_;
    ::uint32_t col_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message_Move final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Chess.Message.Move) */ {
 public:
  inline Message_Move() : Message_Move(nullptr) {}
  ~Message_Move() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message_Move* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message_Move));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message_Move(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message_Move(const Message_Move& from) : Message_Move(nullptr, from) {}
  inline Message_Move(Message_Move&& from) noexcept
      : Message_Move(nullptr, std::move(from)) {}
  inline Message_Move& operator=(const Message_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Move& operator=(Message_Move&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Move* internal_default_instance() {
    return reinterpret_cast<const Message_Move*>(
        &_Message_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Message_Move& a, Message_Move& b) { a.Swap(&b); }
  inline void Swap(Message_Move* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Move* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Move* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message_Move>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message_Move& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message_Move& from) { Message_Move::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message_Move* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Chess.Message.Move"; }

 protected:
  explicit Message_Move(::google::protobuf::Arena* arena);
  Message_Move(::google::protobuf::Arena* arena, const Message_Move& from);
  Message_Move(::google::protobuf::Arena* arena, Message_Move&& from) noexcept
      : Message_Move(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kToFieldNumber = 1,
    kFromFieldNumber = 2,
  };
  // .Chess.Message.Position to = 1;
  bool has_to() const;
  void clear_to() ;
  const ::Chess::Message_Position& to() const;
  PROTOBUF_NODISCARD ::Chess::Message_Position* release_to();
  ::Chess::Message_Position* mutable_to();
  void set_allocated_to(::Chess::Message_Position* value);
  void unsafe_arena_set_allocated_to(::Chess::Message_Position* value);
  ::Chess::Message_Position* unsafe_arena_release_to();

  private:
  const ::Chess::Message_Position& _internal_to() const;
  ::Chess::Message_Position* _internal_mutable_to();

  public:
  // .Chess.Message.Position from = 2;
  bool has_from() const;
  void clear_from() ;
  const ::Chess::Message_Position& from() const;
  PROTOBUF_NODISCARD ::Chess::Message_Position* release_from();
  ::Chess::Message_Position* mutable_from();
  void set_allocated_from(::Chess::Message_Position* value);
  void unsafe_arena_set_allocated_from(::Chess::Message_Position* value);
  ::Chess::Message_Position* unsafe_arena_release_from();

  private:
  const ::Chess::Message_Position& _internal_from() const;
  ::Chess::Message_Position* _internal_mutable_from();

  public:
  // @@protoc_insertion_point(class_scope:Chess.Message.Move)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message_Move& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Chess::Message_Position* to_;
    ::Chess::Message_Position* from_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Chess.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Chess.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Position = Message_Position;
  using Move = Message_Move;
  using Type = Message_Type;
  static constexpr Type JOIN_GAME = Message_Type_JOIN_GAME;
  static constexpr Type CREATE_GAME = Message_Type_CREATE_GAME;
  static constexpr Type MAKE_MOVE = Message_Type_MAKE_MOVE;
  static constexpr Type RESIGN = Message_Type_RESIGN;
  static constexpr Type WIN = Message_Type_WIN;
  static constexpr Type LOSE = Message_Type_LOSE;
  static constexpr Type DRAW = Message_Type_DRAW;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Message_Type_Type_MIN;
  static constexpr Type Type_MAX = Message_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Message_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Message_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Message_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMoveFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIsWhiteFieldNumber = 2,
  };
  // .Chess.Message.Move move = 3;
  bool has_move() const;
  void clear_move() ;
  const ::Chess::Message_Move& move() const;
  PROTOBUF_NODISCARD ::Chess::Message_Move* release_move();
  ::Chess::Message_Move* mutable_move();
  void set_allocated_move(::Chess::Message_Move* value);
  void unsafe_arena_set_allocated_move(::Chess::Message_Move* value);
  ::Chess::Message_Move* unsafe_arena_release_move();

  private:
  const ::Chess::Message_Move& _internal_move() const;
  ::Chess::Message_Move* _internal_mutable_move();

  public:
  // .Chess.Message.Type type = 1;
  void clear_type() ;
  ::Chess::Message_Type type() const;
  void set_type(::Chess::Message_Type value);

  private:
  ::Chess::Message_Type _internal_type() const;
  void _internal_set_type(::Chess::Message_Type value);

  public:
  // bool isWhite = 2;
  void clear_iswhite() ;
  bool iswhite() const;
  void set_iswhite(bool value);

  private:
  bool _internal_iswhite() const;
  void _internal_set_iswhite(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Chess.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Chess::Message_Move* move_;
    int type_;
    bool iswhite_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Message_Position

// uint32 row = 1;
inline void Message_Position::clear_row() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_ = 0u;
}
inline ::uint32_t Message_Position::row() const {
  // @@protoc_insertion_point(field_get:Chess.Message.Position.row)
  return _internal_row();
}
inline void Message_Position::set_row(::uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:Chess.Message.Position.row)
}
inline ::uint32_t Message_Position::_internal_row() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.row_;
}
inline void Message_Position::_internal_set_row(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_ = value;
}

// uint32 col = 2;
inline void Message_Position::clear_col() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.col_ = 0u;
}
inline ::uint32_t Message_Position::col() const {
  // @@protoc_insertion_point(field_get:Chess.Message.Position.col)
  return _internal_col();
}
inline void Message_Position::set_col(::uint32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:Chess.Message.Position.col)
}
inline ::uint32_t Message_Position::_internal_col() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.col_;
}
inline void Message_Position::_internal_set_col(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.col_ = value;
}

// -------------------------------------------------------------------

// Message_Move

// .Chess.Message.Position to = 1;
inline bool Message_Move::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline void Message_Move::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Chess::Message_Position& Message_Move::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Chess::Message_Position* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Chess::Message_Position&>(::Chess::_Message_Position_default_instance_);
}
inline const ::Chess::Message_Position& Message_Move::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Chess.Message.Move.to)
  return _internal_to();
}
inline void Message_Move::unsafe_arena_set_allocated_to(::Chess::Message_Position* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::Chess::Message_Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Chess.Message.Move.to)
}
inline ::Chess::Message_Position* Message_Move::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Chess::Message_Position* released = _impl_.to_;
  _impl_.to_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Chess::Message_Position* Message_Move::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Chess.Message.Move.to)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Chess::Message_Position* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Chess::Message_Position* Message_Move::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Chess::Message_Position>(GetArena());
    _impl_.to_ = reinterpret_cast<::Chess::Message_Position*>(p);
  }
  return _impl_.to_;
}
inline ::Chess::Message_Position* Message_Move::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Chess::Message_Position* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Chess.Message.Move.to)
  return _msg;
}
inline void Message_Move::set_allocated_to(::Chess::Message_Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.to_ = reinterpret_cast<::Chess::Message_Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:Chess.Message.Move.to)
}

// .Chess.Message.Position from = 2;
inline bool Message_Move::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline void Message_Move::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Chess::Message_Position& Message_Move::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Chess::Message_Position* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Chess::Message_Position&>(::Chess::_Message_Position_default_instance_);
}
inline const ::Chess::Message_Position& Message_Move::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Chess.Message.Move.from)
  return _internal_from();
}
inline void Message_Move::unsafe_arena_set_allocated_from(::Chess::Message_Position* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::Chess::Message_Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Chess.Message.Move.from)
}
inline ::Chess::Message_Position* Message_Move::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Chess::Message_Position* released = _impl_.from_;
  _impl_.from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Chess::Message_Position* Message_Move::unsafe_arena_release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Chess.Message.Move.from)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Chess::Message_Position* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Chess::Message_Position* Message_Move::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Chess::Message_Position>(GetArena());
    _impl_.from_ = reinterpret_cast<::Chess::Message_Position*>(p);
  }
  return _impl_.from_;
}
inline ::Chess::Message_Position* Message_Move::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Chess::Message_Position* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Chess.Message.Move.from)
  return _msg;
}
inline void Message_Move::set_allocated_from(::Chess::Message_Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.from_ = reinterpret_cast<::Chess::Message_Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:Chess.Message.Move.from)
}

// -------------------------------------------------------------------

// Message

// .Chess.Message.Type type = 1;
inline void Message::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::Chess::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:Chess.Message.type)
  return _internal_type();
}
inline void Message::set_type(::Chess::Message_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Chess.Message.type)
}
inline ::Chess::Message_Type Message::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Chess::Message_Type>(_impl_.type_);
}
inline void Message::_internal_set_type(::Chess::Message_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// bool isWhite = 2;
inline void Message::clear_iswhite() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iswhite_ = false;
}
inline bool Message::iswhite() const {
  // @@protoc_insertion_point(field_get:Chess.Message.isWhite)
  return _internal_iswhite();
}
inline void Message::set_iswhite(bool value) {
  _internal_set_iswhite(value);
  // @@protoc_insertion_point(field_set:Chess.Message.isWhite)
}
inline bool Message::_internal_iswhite() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iswhite_;
}
inline void Message::_internal_set_iswhite(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iswhite_ = value;
}

// .Chess.Message.Move move = 3;
inline bool Message::has_move() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.move_ != nullptr);
  return value;
}
inline void Message::clear_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.move_ != nullptr) _impl_.move_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Chess::Message_Move& Message::_internal_move() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Chess::Message_Move* p = _impl_.move_;
  return p != nullptr ? *p : reinterpret_cast<const ::Chess::Message_Move&>(::Chess::_Message_Move_default_instance_);
}
inline const ::Chess::Message_Move& Message::move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Chess.Message.move)
  return _internal_move();
}
inline void Message::unsafe_arena_set_allocated_move(::Chess::Message_Move* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.move_);
  }
  _impl_.move_ = reinterpret_cast<::Chess::Message_Move*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Chess.Message.move)
}
inline ::Chess::Message_Move* Message::release_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Chess::Message_Move* released = _impl_.move_;
  _impl_.move_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Chess::Message_Move* Message::unsafe_arena_release_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Chess.Message.move)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Chess::Message_Move* temp = _impl_.move_;
  _impl_.move_ = nullptr;
  return temp;
}
inline ::Chess::Message_Move* Message::_internal_mutable_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.move_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Chess::Message_Move>(GetArena());
    _impl_.move_ = reinterpret_cast<::Chess::Message_Move*>(p);
  }
  return _impl_.move_;
}
inline ::Chess::Message_Move* Message::mutable_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Chess::Message_Move* _msg = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:Chess.Message.move)
  return _msg;
}
inline void Message::set_allocated_move(::Chess::Message_Move* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.move_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.move_ = reinterpret_cast<::Chess::Message_Move*>(value);
  // @@protoc_insertion_point(field_set_allocated:Chess.Message.move)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Chess


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Chess::Message_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Chess::Message_Type>() {
  return ::Chess::Message_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // message_2eproto_2epb_2eh
